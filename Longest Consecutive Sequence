class Solution:
    def longestConsecutive(self,num):
        if len(num) == 0:
            return 0
        hashMap = {}
        for i in range(len(num)):
            curr = num[i]
            hashMap[curr] = curr
            
        currOuput = []

        while hashMap != {}:
            result = []    
            value = hashMap.keys()[0]
            hashMap.pop(hashMap.keys()[0],None)
            result.append(value)
            value1 = value + 1
            value0 = value -1
            while (value0 in hashMap.keys()):
                result.append(value0)
                hashMap.pop(value0,None)
                value0 = value0 -1
                
            while(value1 in hashMap.keys()):             
                result.append(value1)
                hashMap.pop(value1,None)
                value1 = value1 + 1
                

            if len(result)>len(currOuput):
                currOuput = result
        return len(currOuput)   
    def longestConsecutive1(self,num):
        visited = set([])
        sequence = set(num)
        count = {}
        for x in num:
            if x in visited:
                continue
            count[x] = 1
            left = x-1
            right = x+1
            while right in sequence:
                visited.add(right)
                count[x] +=1
                right +=1
            while left in sequence:
                visited.add(left)
                count[x] +=1
                left -=1
            visited.add(x)
        return reduce(max,count.values())
